services:
  # Load Balancer / Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: category-ai-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf.template:ro
      - ./ssl:/etc/nginx/ssl:ro
    environment:
      - SERVER_HOST=${SERVER_HOST}
    env_file:
      - .env
    command: /bin/sh -c "envsubst '$$SERVER_HOST' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf && nginx -g 'daemon off;'"
    depends_on:
      - frontend
      - backend

  # Frontend React Application
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
      args:
        - REACT_APP_API_BASE_URL=https://${SERVER_HOST}
        - SERVER_HOST=${SERVER_HOST}
    container_name: category-ai-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
    env_file:
      - .env

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: backend/Dockerfile
    container_name: category-ai-backend
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
    env_file:
      - .env
    depends_on:
      - mongodb

  mongodb:
    image: mongo:7.0
    container_name: category-ai-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_PASSWORD:-password}
      - MONGO_INITDB_DATABASE=${MONGO_DATABASE:-categoryai}
    env_file:
      - .env
    volumes:
      - mongodb_data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

volumes:
  mongodb_data: